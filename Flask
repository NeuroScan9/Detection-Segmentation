from flask import Flask, render_template, request, jsonify, send_file
from flask_cors import CORS
import os
import numpy as np
import torch
from torchvision import transforms
import matplotlib.pyplot as plt
from io import BytesIO

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Define paths
BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # Get the base directory of the Flask app
UPLOAD_FOLDER = os.path.join(BASE_DIR, 'uploads')  # Define the upload folder

if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# Load the trained model
MODEL_PATH = os.path.join(BASE_DIR, 'trained.pth')
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = torch.load(MODEL_PATH, map_location=device)

# Define transformations for the image
image_transform = transforms.Compose([
    transforms.Resize((256, 256)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

def predict_lesion(image_path):
    # Replace this with your actual prediction logic
    # For demonstration, let's assume the prediction is a binary mask (1 for lesion, 0 for background)
    prediction = np.random.randint(0, 2, (1, 1, 256, 256))  # Example random prediction
    return prediction

@app.route('/', methods=['GET'])
def index():
    return render_template('htmlcode.html')

@app.route('/predict', methods=['POST'])
def predict():
    if 'files[]' not in request.files:
        return jsonify({'error': 'No file part'})
    
    files = request.files.getlist('files[]')
    predictions = []
    for file in files:
        if file.filename == '':
            return jsonify({'error': 'No selected file'})

        # Save the uploaded image
        file_path = os.path.join(UPLOAD_FOLDER, file.filename)
        file.save(file_path)

        # Perform prediction
        prediction = predict_lesion(file_path)

        # Convert the prediction tensor to a numpy array
        prediction_list = prediction.tolist()  # Convert NumPy array to Python list
        predictions.append(prediction_list)

        # Delete the uploaded image file
        os.remove(file_path)

    # Convert predictions to numpy arrays and visualize
    predictions_np = np.array(predictions)
    visualize_predictions(predictions_np)

    # Return the prediction result
    return jsonify({'predictions': predictions})

@app.route('/prediction_image')
def prediction_image():
    prediction_image_path = os.path.join(BASE_DIR, 'prediction_result.png')
    return send_file(prediction_image_path, mimetype='image/png')

def visualize_predictions(predictions_np):
    # Plot the predicted masks as images
    plt.figure(figsize=(10, 10))
    for i, mask in enumerate(predictions_np, 1):
        plt.subplot(len(predictions_np), 1, i)
        if len(mask.shape) == 4:  # If the prediction is a batch of images
            mask = mask.squeeze(0)  # Squeeze the batch dimension
        plt.imshow(mask.squeeze(), cmap='gray')  # Assuming the predictions are single-channel images
        plt.axis('off')
        plt.title(f'Prediction {i}')
    plt.tight_layout()
    plt.savefig(os.path.join(BASE_DIR, 'prediction_result.png'))  # Save the visualization
    plt.close()  # Close the plot to avoid displaying it in the web page

if __name__ == '__main__':
    app.run(debug=True)  # Run the Flask app in debug mode

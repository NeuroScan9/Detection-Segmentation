from flask import Flask, request, jsonify
from flask_cors import CORS
import os
from PIL import Image
import numpy as np
import torch
from torchvision import transforms

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Define paths
UPLOAD_FOLDER = 'uploads'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# Load your trained model
# Replace this with code to load your trained model
# model = ...

# Define transformations for the image
image_transform = transforms.Compose([
    transforms.Resize((256, 256)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

def predict_lesion(image_path):
    # Open the image file
    img = Image.open(image_path).convert('RGB')
    
    # Apply transformations
    img = image_transform(img)
    img = img.unsqueeze(0)  # Add batch dimension
    
    # Pass the image through the model for prediction
    # prediction = model(img)
    
    # For demonstration, let's assume the prediction is a binary mask (1 for lesion, 0 for background)
    prediction = torch.randint(0, 2, (1, 1, 256, 256))  # Example random prediction
    
    return prediction

@app.route('/predict', methods=['POST'])
def predict():
    if 'file' not in request.files:
        return jsonify({'error': 'No file part'})
    
    file = request.files['file']
    if file.filename == '':
        return jsonify({'error': 'No selected file'})
    
    if file:
        # Save the uploaded image
        file_path = os.path.join(UPLOAD_FOLDER, file.filename)
        file.save(file_path)
        
        # Perform prediction
        prediction = predict_lesion(file_path)
        
        # Convert the prediction tensor to a numpy array
        prediction = prediction.detach().numpy()
        
        # Delete the uploaded image file
        os.remove(file_path)
        
        # Return the prediction result
        return jsonify({'predictions': prediction.tolist()})  # Convert numpy array to list for JSON serialization

if __name__ == '__main__':
    app.run(debug=True)  # Run the Flask app in debug mode
